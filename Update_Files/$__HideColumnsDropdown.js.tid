created: 20250101000000000
creator: Drevarr
modified: 20250101000000000
modifier: Drevarr
title: $:/GW2/HideColumnsDropdown
tags: $:/tags/RawMarkup
type: application/javascript

<script type="application/javascript">
(function(){
    'use strict';

    if (window.gw2HideColumnsInit) {
        return;
    }
    window.gw2HideColumnsInit = true;

    function closestWrapper(node) {
        while (node && node !== document) {
            if (node.classList && node.classList.contains('col-toggle')) {
                return node;
            }
            node = node.parentNode;
        }
        return null;
    }

    function parseIndex(element) {
        if (!element) {
            return null;
        }
        var raw = element.getAttribute('data-col-index');
        if (raw === null) {
            return null;
        }
        var value = parseInt(raw, 10);
        return isNaN(value) ? null : value;
    }

    function getTableRows(wrapper) {
        if (!wrapper) {
            return [];
        }
        var container = wrapper.querySelector('.col-toggletables');
        if (!container) {
            return [];
        }
        return container.querySelectorAll('tr');
    }

    function applyVisibility(wrapper, index, isVisible) {
        if (!wrapper || index === null) {
            return;
        }
        var rows = getTableRows(wrapper);
        for (var r = 0; r < rows.length; r += 1) {
            var row = rows[r];
            if (!row || !row.children || index >= row.children.length) {
                continue;
            }
            var cell = row.children[index];
            if (cell) {
                cell.style.display = isVisible ? '' : 'none';
            }
        }
    }

    function syncWrapper(wrapper) {
        if (!wrapper) {
            return;
        }
        var boxes = wrapper.querySelectorAll('.col-dropdown input[type="checkbox"][data-col-index]');
        for (var i = 0; i < boxes.length; i += 1) {
            var box = boxes[i];
            var index = parseIndex(box);
            if (index === null) {
                continue;
            }
            applyVisibility(wrapper, index, !!box.checked);
        }
    }

    function toggleMenu(dropdown, open) {
        if (!dropdown) {
            return;
        }
        dropdown.setAttribute('data-open', open ? 'true' : 'false');
        var button = dropdown.querySelector('.col-dropdown__button');
        if (button) {
            button.setAttribute('aria-expanded', open ? 'true' : 'false');
        }
        var menu = dropdown.querySelector('.col-dropdown__menu');
        if (menu) {
            if (open) {
                menu.removeAttribute('hidden');
                menu.setAttribute('aria-hidden', 'false');
            } else {
                menu.setAttribute('hidden', '');
                menu.setAttribute('aria-hidden', 'true');
            }
        }
    }

    function initWrapper(wrapper) {
        if (!wrapper || wrapper.__gw2HideColumnsReady) {
            return;
        }
        wrapper.__gw2HideColumnsReady = true;
        var dropdown = wrapper.querySelector('.col-dropdown');
        if (dropdown && !dropdown.getAttribute('data-open')) {
            toggleMenu(dropdown, false);
        }
        syncWrapper(wrapper);
    }

    function closeOtherMenus(current) {
        var dropdowns = document.querySelectorAll('.col-dropdown[data-open="true"]');
        for (var i = 0; i < dropdowns.length; i += 1) {
            var dropdown = dropdowns[i];
            if (current && dropdown === current) {
                continue;
            }
            toggleMenu(dropdown, false);
        }
    }

    document.addEventListener('click', function(event) {
        var button = event.target.closest('.col-dropdown__button');
        if (button) {
            var dropdown = button.closest('.col-dropdown');
            if (!dropdown) {
                return;
            }
            var isOpen = dropdown.getAttribute('data-open') === 'true';
            closeOtherMenus(dropdown);
            toggleMenu(dropdown, !isOpen);
            return;
        }

        var action = event.target.closest('.col-dropdown__action[data-col-action]');
        if (action) {
            event.preventDefault();
            var wrapper = closestWrapper(action);
            if (!wrapper) {
                return;
            }
            var shouldCheck = action.getAttribute('data-col-action') === 'select';
            var boxes = wrapper.querySelectorAll('.col-dropdown input[type="checkbox"][data-col-index]');
            for (var b = 0; b < boxes.length; b += 1) {
                var box = boxes[b];
                if (!!box.checked !== shouldCheck) {
                    box.checked = shouldCheck;
                    box.dispatchEvent(new Event('change', { bubbles: true }));
                }
            }
            return;
        }

        if (!event.target.closest('.col-dropdown')) {
            closeOtherMenus(null);
        }
    });

    document.addEventListener('change', function(event) {
        var checkbox = event.target.closest('input[type="checkbox"][data-col-index]');
        if (!checkbox || !checkbox.closest('.col-dropdown')) {
            return;
        }
        var wrapper = closestWrapper(checkbox);
        if (!wrapper) {
            return;
        }
        var index = parseIndex(checkbox);
        if (index === null) {
            return;
        }
        applyVisibility(wrapper, index, !!checkbox.checked);
    });

    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', function() {
            var wrappers = document.querySelectorAll('.col-toggle');
            for (var i = 0; i < wrappers.length; i += 1) {
                initWrapper(wrappers[i]);
            }
        });
    } else {
        var wrappersNow = document.querySelectorAll('.col-toggle');
        for (var j = 0; j < wrappersNow.length; j += 1) {
            initWrapper(wrappersNow[j]);
        }
    }

    var observerTarget = document.documentElement || document.body;
    if (observerTarget && observerTarget.ownerDocument) {
        new MutationObserver(function(mutations) {
            for (var m = 0; m < mutations.length; m += 1) {
                var mutation = mutations[m];
                var added = mutation.addedNodes;
                for (var a = 0; a < added.length; a += 1) {
                    var node = added[a];
                    if (!node || node.nodeType !== 1) {
                        continue;
                    }
                    if (node.classList && node.classList.contains('col-toggle')) {
                        initWrapper(node);
                    } else if (node.querySelectorAll) {
                        var wrappers = node.querySelectorAll('.col-toggle');
                        for (var w = 0; w < wrappers.length; w += 1) {
                            initWrapper(wrappers[w]);
                        }
                    }
                }
            }
        }).observe(observerTarget, { childList: true, subtree: true });
    }
})();
</script>
